// Generated by gencpp from file lslidar_ch128x1_msgs/LslidarChPacket.msg
// DO NOT EDIT!


#ifndef LSLIDAR_CH128X1_MSGS_MESSAGE_LSLIDARCHPACKET_H
#define LSLIDAR_CH128X1_MSGS_MESSAGE_LSLIDARCHPACKET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lslidar_ch128x1_msgs
{
template <class ContainerAllocator>
struct LslidarChPacket_
{
  typedef LslidarChPacket_<ContainerAllocator> Type;

  LslidarChPacket_()
    : header()
    , stamp()
    , prism_angle()
    , data()  {
      prism_angle.assign(0.0);

      data.assign(0);
  }
  LslidarChPacket_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , stamp()
    , prism_angle()
    , data()  {
  (void)_alloc;
      prism_angle.assign(0.0);

      data.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef boost::array<double, 4>  _prism_angle_type;
  _prism_angle_type prism_angle;

   typedef boost::array<uint8_t, 1206>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> const> ConstPtr;

}; // struct LslidarChPacket_

typedef ::lslidar_ch128x1_msgs::LslidarChPacket_<std::allocator<void> > LslidarChPacket;

typedef boost::shared_ptr< ::lslidar_ch128x1_msgs::LslidarChPacket > LslidarChPacketPtr;
typedef boost::shared_ptr< ::lslidar_ch128x1_msgs::LslidarChPacket const> LslidarChPacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator1> & lhs, const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.stamp == rhs.stamp &&
    lhs.prism_angle == rhs.prism_angle &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator1> & lhs, const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lslidar_ch128x1_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46a5102a4c7b30d8a4c3b7d1335f1bb1";
  }

  static const char* value(const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46a5102a4c7b30d8ULL;
  static const uint64_t static_value2 = 0xa4c3b7d1335f1bb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lslidar_ch128x1_msgs/LslidarChPacket";
  }

  static const char* value(const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Raw Leishen LIDAR packet.\n"
"\n"
"Header header           #standard ros message header\n"
"time stamp \n"
"float64[4] prism_angle              # prism angle\n"
"uint8[1206] data        # packet contents\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.stamp);
      stream.next(m.prism_angle);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LslidarChPacket_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lslidar_ch128x1_msgs::LslidarChPacket_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "prism_angle[]" << std::endl;
    for (size_t i = 0; i < v.prism_angle.size(); ++i)
    {
      s << indent << "  prism_angle[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.prism_angle[i]);
    }
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LSLIDAR_CH128X1_MSGS_MESSAGE_LSLIDARCHPACKET_H
